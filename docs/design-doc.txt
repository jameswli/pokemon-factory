Factory Project - Team 9
=====
Design Document


##Purpose / Overview
Give a brief, high-level description of what this piece of software will do. This is pretty much you restating the problem as you understand it.

##Requirements
In addition to the Kitting Cell requirements listed on this page: http://www-scf.usc.edu/~csci201/factory/TheKittingCell.htm, there are other requirements on the GUI side as well.

There needs to be 6 clients connecting to a central server:

* Parts Manager
	* makes parts
	* add / change / delete
	* representative set of parts
* Kit Manager
	* establishes what kits the factory can produce
	* assign parts to kits
	* add / change / delete
	* view the production schedule (what's to be made)
* Factory Production Manager
	* select a kit & how many to make
	* view entire simulation
* Kit Assembly Manager
	* Sees parts robot, kitting stand, kit delivery station
* Lane Manager
	* Sees feeders, lanes, nests, diverters
* Gantry Robot Manager
	* Sees gantry robot, parts bins, feeders, purge station

##Classes
In our implementation, the following classes will be necessary.

###Gantry Robot - Chris
    The gantry robot begins the simulation by bringing all of the parts bins onto the screen. The robot will move bins and dump them into the feeder. After dumping the bin into a feeder, the gantry robot will place the bin behind the feeder in the purge station. The robot will also take empty and purged bins into a storage room off of the screen.

	Variables:
	int currentX
		- X coordinate that gantry robot is currently located at
	int currentY
		-Y coordinate that gantry robot is currently located at
	
	int destinationX
		-X coordinate that gantry robot is moving towards
	int destinationY
		-Y coordinate that gantry robot is moving towards
	
	static int storageX
		-X coordinate that storage is located at (located off screen)
	static int storageY
		-Y coordinate that storage is located at (located off screen)
	
	static int startBinX
		-Starting X coordinate of the line of bins
	static int  startBinY
		-Starting Y coordinate of the line of bins
	
	Bin heldBin
		-Bin being held by the feeder. Used to move the bin with the feeder
	
	Feeder destinationFeeder
		-Feeder to drop heldBin at
	
	Arraylist <Bin> binList
		-Arraylist to store the locations of each new bin
	
	Imageicon gantryImage
		-Image for gantry robot
	
	Functions:
	receiveBin(Bin)
		-Gantry robot takes a bin from offscreen and moves it to its correct position on screen. Uses binList to find correct location
	dropBin(Bin, Feeder)
		-Gantry robot picks up the given bin and drops it into the specified feeder. After being emptied into the feeder, the bin is moved to the purge station.
	removeBin(Bin)
		-Gantry robot takes a bin from the purge station and moves it off screen to the storage location
	
	moveTo(destinationX, destinationY)
		-Moves gantry from current coordinates to the new destination coordinates

###Feeders - Harry
	feederGraphicsLogic (this class processes graphics logic on the server side):
		Methods:
			- void receiveBin(Bin)
				- this function receives a bin to process from the agents
			- void purgeBin(Bin)
				- this function purges the contents of the feeder into a bin received from the agents
			- boolean isPartLow()
				- this function returns true if part count is low (under X)
				// TODO
			- void movePartToDiverter(Part)
				- this function moves a part from the feeder to the diverter
			- void movePartToLane(Part)
				- this function moves a part from the diverter to the lane
				// TODO: must figure out whether to divert left or right
			- void toggleOn(boolean)
				- this function turns the feeder on or off
			- void toggleRearGate(boolean)
				- this function lowers the rear gate

		Variables:
			- boolean binReceived
				- has a bin been received and is waiting to be processed?
			- int partsFed
				- how many parts has the feeder fed to the diverter/lane?
			- Bin bin1
				- the current bin being processed
	feederDisplay:
		Methods:
			- void setPartImage(String)
				- this retrieves the part type from the server, parses it into a file path, and sets the image for ImageIcon part
	
		Variables:
			- ImageIcon feederUnit
				- this is the image of the stationary main feeder unit
			- ImageIcon diverter
				- this is the image of the diverter
				- we will need several of these in different positions to animate the moving diverter
			- ImageIcon part
				- this is the image of the part which will travel down the diverter
		
###Lane


###Nest


###Camera - Harry
	cameraGraphicsLogic:
		Methods:
			- boolean takeNestPhoto(Nest, Nest)
				- this function "takes a photo" of two nests simultaneously and returns true if they pass inspection
				// TODO both nests simultaneously or return quality of each?
				- first check to see that nest is full before taking photo
			- boolean takeKitPhoto(Kit, KitConfig)
				- this function "takes a photo" of a completed kit and compares it to the KitConfig, returning true if it matches and false if it does not
				- KitConfig is the benchmark kit configuration (the way the kit should be)

		Variables:
			- Map<Part, boolean> qualityOfParts
				- this map stores whether a nest part is good or damaged
				- values will all be true for v.0
			- Map<Part, xCoordinate>
			- Map<Part, yCoordinate>
			// boolean photo taken?

	cameraDisplay:
		Methods:
			// retrieve center position of nest or kit to take photo of
		Variables:
			Ellipse2D.Double cameraFlash
				- this circle simulates a camera flash/photo being taken


###Parts Robot
	Variables:
		-int robotInitialX, robotInitialY
			-initial location of robot
		-int robotCurrentX, robotCurrentY
			-current location of robot
		-boolean arm1, arm2, arm3, arm4
			-whether the arm is full, initialized empty
		-int ArrayList<Part> partArray
			-an array of parts that allocates memory for 4 parts
	Methods:
		-pickUpPart(Part)
			-pickup from nests
			-goes to a location to pick up a part
			-be able to hold 4 parts at a time
		-givePartToKit(Kit, int)
			-gives the part to the kit
			-goes to a location to give a part
			-puts part in a specific location inside the kit
		-goHome()
			-depends on specific graphics implementation
			-sends the robot back to the initial location
			-makes sure that the robot doesn't collide
			-then send message that the action has been performed(either part is picked up or it's given to a kit)
		-drawRobot(robotImage)
			-draws the robot
			-pass by reference robotImage to drawperformed 
###Kits Robot
	Variables
		-int robotLocationX, robotLocationY
			-location of Kit Robot(doesn't change)
		-init initArmLocationX,initArmLocationY
			-initial location of the arm
		-int currentArmLocationX, currentArmLocationY
			-location of the arm
	Methods
		
		-pickUpKit(Kit)
			-picks up a Kit
		-dropKit(Location)
			-put Kit at one of the tables
			-2 spots on the stand for parts robot, and 1 for camera
		-goHome()
			-depends on specific graphics implementation
		-drawRobot(robotImage,armImage)
			-draws the robot
			-pass by reference robotImage and armImage to drawperformed
		-rotateArm(Location)
			-rotates arm to a specific location(4 locations: empty kit location, 2 kit locations, camera location)
			-will be part of the dropKit,goHome, and pickupKit method
		
	
###Conveyor - Vansh and Neetu
    The conveyor is going to used to bring empty kits into the factory and move completed ones out. After bringing empty kits into the factory, the kits will be moved by other robots. The conveyor will need to know how to move and stop based on its sensors and instructions from the factory agent.
    Methods:
        - bringEmptyKit(Kit) : Brings in an empty Kit from offscreen. Here we would be creating a new kit variable. Moves the conveyor belt and the kit together.
        - giveKitToKitRobot(Kit) : gives kit to the kit robot. Deletes the kit from the kitsOnConveyor. 
        - receiveKit(Kit) : receive completed Kit from Kit Robot then move the Kit offscreen
        - draw() : paints the conveyer belt with the kits at the right position
    Variables:
        - arrayList<ImageIcon> conveyorSquares : this will be the graphical representation of the conveyor. We will move the squares and this give the impression of the conveyor moving
        - arrayList<Kits> kitsOnConveyor : this will keep track of all the kits on the conveyor.

###Part - Vansh and Neetu
    Parts are going to used to assemble the kits. The parts will have a respective image and sound associated to them.
    Methods:
        - constructor(PartType): Based on the PartType, image and sound will be set to their correct values
        - getLocationX() : returns the x coordinate of the part
        - getLocationY() : returns the y coordinate of the part
        - getName() : returns the name
        - playSound() : plays the sound
        - draw(int,int) : draws the part at the correct location
    Variables:
        - locationX and locationY : location of the part
        - PartType type :  determines what kind of part it is
        - ImageIcon image : image of the part
        - sound (V2) : sound the part makes

###Kit - Vansh and Neetu
    Methods:
        - draw(int, int) : draws the kit at the location
        - setPartTypes(ArrayList<PartType>) : sets partTypes
        - addPart(Part) : adds the part to part ArrayList
        - getLocationX() : returns the x coordinate of the part
        - getLocationY() : returns the y coordinate of the part
    Variables:
        - ArrayList<Part> parts : keeps track of all the parts in the kit
        - ArrayList<PartType> partTypes : list of all the parts required in the kit
        - locationX and locationY : location of the kit
        - ImageIcon kitImage : image of the kit
        
###Bin - Vansh and Neetu
    Methods:
        - Constructor(Parts) : creates a bin containing numberous specified parts
        - receiveParts(ArrayList<Part> parts): both from constructor, and from Feedersâ€™ purge
        - getPartType() : returns the part type
        - draw(int, int) : draws the bin at the location
        - getQuantity() : returns quantity of parts in the bin
        - setEmpty() : empties the bin during a purge
    Variables:
        - locationX and locationY : location of the kit
        - ArrayList<Part> parts : ArrayList of all the parts that are currently in the bin
        - Public Boolean isEmpty : determines if the bin is empty so the respective ImageIcon can be drawn.
        - ImageIcon full : image of a full bin
        - ImageIcon empty : image of an empty bin
        - int partQuantity : quantity of parts in the bin

##Global Functions / Data
None

##High Level Architecture

A general flow for the simulation:

* Agent generates actions
* Server receives these actions (e.g. pick up kit from conveyor)
* Server processes the action, does logic (e.g. remove kit from the conveyor list)
* Server sends messages to clients about animation needed to be drawn. 
* Clients receive messages, animate as told
* Clients send back to Server notifying animation done
* Server responds to Agent

To accomodate the networking requirements, all objects that we draw will have two sub parts: Logic and Display. When the server receives a message from the agent, Logic will first process the necessary changes to the data, then pass the appropriate draw commands to the Display class. 

##User Interface

##Test Cases
- Writing a main method full of instructions, see everything works without server instructions
- Some might not require testing, because the server agents will guarantee valid outputs.
