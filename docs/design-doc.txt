Factory Project - Team 9
=====
Design Document


##Purpose / Overview
Give a brief, high-level description of what this piece of software will do. This is pretty much you restating the problem as you understand it.

##Requirements
What are the functions that this software is supposed to perform?

Try to phrase them in a clear and concise manner.

##Classes
In our implementation, the following classes will be necessary.

Classes
########Gantry Robot - Chris
    The gantry robot begins the simulation by bringing all of the parts bins onto the screen. The robot will move bins and dump them into the feeder. After dumping the bin into a feeder, the gantry robot will place the bin behind the feeder in the purge station. The robot will also take empty and purged bins into a storage room off of the screen.

Variables:
	int currentX
		- X coordinate that gantry robot is currently located at
int currentY
	-Y coordinate that gantry robot is currently located at

int destinationX
	-X coordinate that gantry robot is moving towards
int destinationY
	-Y coordinate that gantry robot is moving towards

static int storageX
	-X coordinate that storage is located at (located off screen)
static int storageY
	-Y coordinate that storage is located at (located off screen)

static int startBinX
	-Starting X coordinate of the line of bins
static int  startBinY
	-Starting Y coordinate of the line of bins

Bin heldBin
	-Bin being held by the feeder. Used to move the bin with the feeder

Feeder destinationFeeder
	-Feeder to drop heldBin at

Arraylist <Bin> binList
	-Arraylist to store the locations of each new bin

Imageicon gantryImage
	-Image for gantry robot

Functions:
receiveBin(Bin)
	-Gantry robot takes a bin from offscreen and moves it to its correct position on screen. Uses binList to find correct location
dropBin(Bin, Feeder)
	-Gantry robot picks up the given bin and drops it into the specified feeder. After being emptied into the feeder, the bin is moved to the purge station.
removeBin(Bin)
	-Gantry robot takes a bin from the purge station and moves it off screen to the storage location

moveTo(destinationX, destinationY)
	-Moves gantry from current coordinates to the new destination coordinates

###Feeders
Some description.

- Some method
- Some other method

###Lane


###Nest


###Camera


###Parts Robot


###Kits Robot


###Conveyor - Vansh and Neetu
    Methods:
        - bringEmptyKit(Kit) : Brings in an empty Kit from offscreen. Here we would be creating a new kit variable. Moves the conveyor belt and the kit together.
        - giveKitToKitRobot(Kit) : gives kit to the kit robot. Deletes the kit from the kitsOnConveyor. 
        - receiveKit(Kit) : receive completed Kit from Kit Robot then move the Kit offscreen
        - draw() : paints the conveyer belt with the kits at the right position
    Variables:
        - arrayList<ImageIcon> conveyorSquares : this will be the graphical representation of the conveyor. We will move the squares and this give the impression of the conveyor moving
        - arrayList<Kits> kitsOnConveyor : this will keep track of all the kits on the conveyor.

###Part - Vansh and Neetu
    Methods:
        - constructor(string): sets the name of the part. Based on the name, image and sound will be set to their correct values
        - getLocationX() : returns the x coordinate of the part
        - getLocationY() : returns the y coordinate of the part
        - getName() : returns the name
        - playSound() : plays the sound
        - draw(int,int) : draws the part at the correct location
    Variables:
        - locationX and locationY : location of the part
        - PartType type :  determines what kind of part it is
        - name : name of the part
        - ImageIcon image : image of the part
        - sound (V2) : sound the part makes

###Kit - Vansh and Neetu
    Methods:
        - draw(int, int) : draws the kit at the location
        - setPartTypes(ArrayList<PartType>) : sets partTypes
        - addPart(Part) : adds the part to part ArrayList
        - getLocationX() : returns the x coordinate of the part
        - getLocationY() : returns the y coordinate of the part
    Variables:
        - <Part> parts : keeps track of all the parts in the kit
        - ArrayList<PartType> partTypes : list of all the parts required in the kit
        - locationX and locationY : location of the kit
        - ImageIcon kitImage : image of the kit
        
###Bin - Vansh and Neetu
    Methods:
        - Constructor(Parts) : creates a bin containing numberous specified parts
        - receiveParts(ArrayList<Part> parts): both from constructor, and from Feedersâ€™ purge
        - getPartType() : returns the part type
        - draw(int, int) : draws the bin at the location
        - getQuantity() : returns quantity of parts in the bin
        - emptyBin() : empties the bin during a purge
    Variables:
        - locationX and locationY : location of the kit
        - ArrayList<Part> parts : ArrayList of all the parts that are currently in the bin
        - Boolean isFull : determines if the bin is full so the respective ImageIcon can be drawn
        - ImageIcon full : image of a full bin
        - ImageIcon empty : image of an empty bin
        - int partQuantity : quantity of parts in the bin

##Global Functions / Data
None

##High Level Architecture

##User Interface

##Test Cases
- Writing a main method full of instructions, see everything works without server instructions
- Some might not require testing, because the server agents will guarantee valid outputs.
