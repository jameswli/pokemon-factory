#Factory Project - Team 9
Design Document

##Purpose / Overview
The goal of our project is to simulate a factory environment. In the factory, multiple devices will be interacting with each other to build "kits". These kits wlil be spcified by a user to contain specific "parts".

##Requirements
In addition to the Kitting Cell requirements listed on this page: http://www-scf.usc.edu/~csci201/factory/TheKittingCell.htm, there are other requirements on the GUI side as well.

There needs to be 6 clients connecting to a central server:

* Parts Manager
	* makes parts
	* add / change / delete
	* representative set of parts
* Kit Manager
	* establishes what kits the factory can produce
	* assign parts to kits
	* add / change / delete
	* view the production schedule (what's to be made)
* Factory Production Manager
	* select a kit & how many to make
	* view entire simulation
* Kit Assembly Manager
	* Sees parts robot, kitting stand, kit delivery station
* Lane Manager
	* Sees feeders, lanes, nests, diverters
* Gantry Robot Manager
	* Sees gantry robot, parts bins, feeders, purge station

##Classes
In our implementation, the following classes will be necessary.

###Server - Peter
The Server is the "middleman" between Agents and the GUI clients. This is where constructors of the different Agents will be called, as well as establishing connections with the GUI clients. 

Each client will have two connections to the server on two different ports. This is done so that reading/writing will not be conflicted. Two threads will be created per client, and will be run after establishing connections. One will implement ReadAClient, the other WriteAClient.

Clients are identified as the first Request data received from them. Then, they will be referenced as appropriately. 

	Data:
		ClientReader partsMngrReader
		ClientWriter partsMngrWriter
		ClientReader kitsMngrReader
		ClientWriter kitsMngrWriter
		etcâ€¦.

###ClientReader - Peter
This class implements Runnable.

	Method:
		run()
			- composed of a continuous while loop, forwarding calls from the clients to the agents, so they can process user controls that took place in the GUI.

###ClientWriter - Peter
This class implements Runnable.

	Method:
		sendData(Request)
			- sends the Request object, which includes commands and data associated with them, to the client.
			
###Request - Peter
This class is used by ClientReader/Writer, as well as Clients. Stores commands and data associated with them.
	
	Method:
		getters
	Data:
		String command
			- e.g. "MoveKitRobot"
		Object data
			- e.g. { int newX = 50, int newY = 40 }

###Gantry Robot - Chris
The gantry robot begins the simulation by bringing all of the parts bins onto the screen. The robot will move bins and dump them into the feeder. After dumping the bin into a feeder, the gantry robot will place the bin behind the feeder in the purge station. The robot will also take empty and purged bins into a storage room off of the screen.

	Variables:
	int currentX
		- X coordinate that gantry robot is currently located at
	int currentY
		-Y coordinate that gantry robot is currently located at
	
	int destinationX
		-X coordinate that gantry robot is moving towards
	int destinationY
		-Y coordinate that gantry robot is moving towards
	
	static int storageX
		-X coordinate that storage is located at (located off screen)
	static int storageY
		-Y coordinate that storage is located at (located off screen)
	
	static int startBinX
		-Starting X coordinate of the line of bins
	static int  startBinY
		-Starting Y coordinate of the line of bins
	
	Bin heldBin
		-Bin being held by the feeder. Used to move the bin with the feeder
	
	Feeder destinationFeeder
		-Feeder to drop heldBin at
	
	Arraylist <Bin> binList
		-Arraylist to store the locations of each new bin
	
	Imageicon gantryImage
		-Image for gantry robot
	
	Functions:
	receiveBin(Bin)
		-Gantry robot takes a bin from offscreen and moves it to its correct position on screen. Uses binList to find correct location
	dropBin(Bin, Feeder)
		-Gantry robot picks up the given bin and drops it into the specified feeder. After being emptied into the feeder, the bin is moved to the purge station.
	removeBin(Bin)
		-Gantry robot takes a bin from the purge station and moves it off screen to the storage location
	
	moveTo(destinationX, destinationY)
		-Moves gantry from current coordinates to the new destination coordinates

###Feeders - Harry
	feederGraphicsLogic (this class processes graphics logic on the server side):
		Methods:
			- feederGraphicsLogic(int, Server)
				- this is the default constructor
				- it takes an int which is the feederID and a Server which is a reference to the server
				- location = new Location(200, 100*feederID) - set the location of the feeder
				- Server.sendData(new Request("initGraphics", "Feeder" + ID, location) - tell the feederGraphicsDisplay to paint the feeder
			- void receiveBin(BinGraphics aBinGraphics)
				- this function receives a bin to process from the agents
				- we set the location of the BinGraphics object: aBinGraphics.setLocation(new Location(x,y))
			- void purgeBin(BinGraphics)
				- this function purges the contents of the feeder into a bin received from the agents
				- parts coordinates are changed so that they "move" towards the purge bin
			- void setPartLow(boolean)
				- this function sets the value of "partLow"
			- void movePartToDiverter(Part)
				- this function moves a part from the feeder to the diverter
				- part x and y coordinates are changed
			- void flipDiverter()
				- this function flips the diverter to the opposite lane
				- Server.sendData(new Request("flipDiverter", "Feeder" + ID, null)
			- void movePartToLane(Part)
				- this function moves a part from the diverter to the lane
				- part x and y coordinates are changed
			- void toggleOn(boolean)
				- this function turns the feeder on or off

		Variables:
			- boolean partLow
				- determines whether a part is low
			- int partsFed
				- how many parts has the feeder fed to the diverter/lane?
			- BinGraphics binGraphics
				- the current bin being processed
			- Location location
				- this is the location of the feeder
			- Server server
				- references to the server
			- int feederID
				- this is the unique ID of the feeder because there will be 4 feeders in the factory

	feederGraphicsDisplay:
		Methods:
			- feederGraphicsDisplay(int)
				- this is the default constructor
				- it takes in an int ID to identify which feeder it is
			- receiveData(Request)
				- this function parses the request from the logic/server end and carries out the appropriate action
			- paintComponent(Graphics)
				- this will paint the feeder and diverter
		Variables:
			- ImageIcon feederUnit
				- this is the image of the stationary main feeder unit
			- ImageIcon diverter
				- this is the image of the diverter
				- this will be rotated when the diverter is flipped
			- int feederID
				- this is the unique ID of the feeder because there will be 4 feeders in the factory

###Lane - Shay
	LaneGraphicsLogic
			- will process info from Agents and send graphics instructions through Server
			- for every method call to this LGL object, will need to send a message (Request object) to LaneGraphicsDisplay via LaneManager via the Server
			- pass ID in target when sending Requests
			- Server constructs this
		Constructor:
			- Server server, int laneID, Nest nest
		Methods:
			- receivePart(PartGraphicsLogic)
				- called when Part is delivered from Feeder/Diverter to Lane
				- add Part to Lane queue
				- set start Location of Part
			- givePartToNest(PartGraphicsLogic)
				- at the end of the Lane, gives the Part to the Nest
				- receive message from LGD that Part is at end of Lane and Nest not full
				- tell NestGraphicsLogic that we are passing Part
				- remove from Lane parts queue
			- purge()
				- empty parts off the end of the lane
			- setAmplitude(int)
				- sets how quickly parts vibrate down a Lane
			- boolean isFull()
				- returns true if Lane is full
			- toggleSwitch(boolean)
				- on/off switch (boolean laneOn)
				- must be off before Nest is purged
			- receiveData(Request)
				- parse into local vars: target, command, data
				- if/else statements to determine which method to call
		Variables:
			- static final int MAX_PARTS
				- max number of parts that can be on a Lane
			- static final Location PART_START, PART_END
				- start and end locations of Part on the Lane
			- Server server
				- instructions to display graphics will be sent through the server
			- int laneID
				- the ID of this Lane
			- Nest nest
				- the Nest associated with this LaneGraphicsLogic object
			- ArrayList<Part> partsOnLane
				- dynamically stores Parts currently on Lane
			- int numPartsOnLane
				- number of parts currently on Lane
			- int amplitude	
				- vibration setting; how quickly parts vibrate down Lane
			- boolean laneOn
				- true if Lane is on

	LaneGraphicsDisplay
			- at least 2 images to show Lane animation
			- LaneManager constructs this
			- pass ID in target when sending Requests to LaneManager
		Constructor:
			- LaneManager laneManager, int laneID
		Methods:
			- paintComponent(Graphics2D g2)
				- paints state of Lane
				- tells parts where to draw themselves
				- increments Location
			- receiveData(Request)
				- parse into local vars: target, command, data
				- if/else statements to determine which method to call
			- receivePart(PartGraphicsDisplay)
				- called when Part is delivered from Feeder/Diverter to Lane
				- call movePartsDownLane()
			- givePartToNest(PartGraphicsDisplay)
				- tells LaneManager to tell LaneGraphicsLogic that Part was given to Nest (pass back through Server)
					- LGL tells NGL
				- at the end of the Lane, gives the Part to the Nest
			- purge()
				- empty parts off the end of the lane
				- when all parts off lane, tell LM to tell LGL that lane finished purging (pass back through Server)
			- setAmplitude(int)
				- adjusts animation to show appropriate change in amplitude
			- toggleSwitch(boolean)
				- on/off switch (boolean laneOn)
				- (must be off before Nest is purged - pause lane animation)
			- movePartDownLane()
				- get Part Location, increment, then set new Part Location
			- lineUpParts()
				- if Nest is full, parts line up behind a full Nest
		Variables:
			- static final int MAX_PARTS
				- max number of parts that can be on a Lane
			- static final int IMG_LENGTH
				- horizontal length of the Lane image
			- static final int LANE_BEG_X, LANE_END_X
				- x-coordinates of beginning and end of lane
			- static final int PART_WIDTH, PART_HEIGHT
				- width and height of the part
			- LaneManager laneManager
				- the LaneManager (client) which talks to the Server
			- static ArrayList<ImageIcon> emptyLaneImg
				- stores static ImageIcon emptyLane1, emptyLane2
				- need at least 2 images to show animation
			- static ArrayList<ImageIcon> partXXImg
				- where XX is the part type
				- stores static ImageIcon partXXLane1, partXXLane2
				- need at least 2 images to show animation
				- shift y-coordinates in 1 image to show vibration down Lane
			- int laneID
				- the ID of this Lane
			- ArrayList<ImageIcon> imgsOnLane;
				- dynamically stores images of Lane
			- boolean laneOn	
				- true if Lane is on

###Nest - Shay
	NestGraphicsLogic
			- will process info from Agents and send graphics instructions through Server
			- for every method call to this NGL object, will need to send a message (Request object) to 
			- pass ID in target when sending Requests to Server
NestGraphicsDisplay via LaneManager via the Server
			- Server constructs this
		Constructor:
			- Server server, int nestID, PartsRobot partsRobot
		Methods:
			- receivePart(PartGraphicsLogic)
				- called when Part is delivered from Lane to Nest
			- givePartToPartsRobot(PartGraphicsLogic)
				- tells PartsRobot to take the Part; Nest is no longer concerned with that Part
				- receive message when PartsRobot has taken Part
			- void purge()
				- called if no good parts can be located by the Camera
				- must tell LGL to stop sending parts during Nest purge cycle
				- clear list of parts in Nest
			- boolean isFull()
				- returns true if Nest is full
			- boolean allPartsUnanalyzed()	// can do this on Camera end as well or instead
				- returns true if all Parts in Nest are unanalyzed (Camera can take a picture)
			- boolean allPartsBad()
				- returns true if all Parts in Nest are bad (bad part purge OK)
			- boolean allPartsGood()
				- returns true if all Parts in Nest are good
			- ArrayList<Part> getPartsInNest()
				- returns the parts in the nest
			- Map<Part,Boolean> getQualityOfParts()
				- returns a map of Parts and the quality of each Part (good/bad)
			- receiveData(Request)
				- parse into local vars: target, command, data
				- if/else statements to determine which method to call
			- Location getLocation()
				- returns Location of upper left corner of the Nest
		Variables:
			- static final int MAX_PARTS
				- max number of parts this Nest holds
			- Server server
				- instructions to display graphics will be sent through the server
			- int nestID
				- the ID of this Nest
			- Location location
				- Location of upper left corner of this nest
			- ArrayList<Part> partsInNest
				- dynamically stores the parts currently in the Nest
			- boolean purging
				- true during Nest purge cycle, can't receive parts
			- boolean isFull
				- true if nest is full, can't receive parts
			- ArrayList<Boolean> nestSpots
				- true if spot is filled, false if not

	NestGraphicsDisplay
			- LaneManager constructs this
			- pass ID in target when sending Requests to LaneManager
		Constructor: LaneManager laneManager, int nestID
		Methods:
			- paintComponent(Graphics2D g2)
				- paints state of Nest
				- tells parts where to draw themselves
			- receiveData(Request)
				- parse into local vars: target, command, data
				- if/else statements to determine which method to call
			- receivePart(PartGraphicsDisplay)
				- called when Part is delivered from Lane to Nest
				- fill nest left to right, top to bottom
			- givePartToPartsRobot(PartGraphicsDisplay)
				- tells PartsRobot to take the Part; Nest is no longer concerned with that Part
				- remove that part, shift remaining parts up (or fill in empty spots)
				- receive message when PartsRobot has taken Part
			- void purge()
				- called if no good parts can be located by the Camera
				- Parts just fall on the floor
				- when all parts out of Nest, tell LM to tell NGL that Nest finished purging (pass back through Server)
			- movePartsUp()
				- moves parts up into highest spot when filling the nest
		Variables:
			- static final int MAX_PARTS
				- max number of parts this Nest holds
			- static final int NEST_X
				- x-coordinate of the Nest
			- static final int NEST_WIDTH, NEST_HEIGHT
				- width and height of the Nest
			- static final int PART_WIDTH, PART_HEIGHT
				- width and height of the Part images
			- static ImageIcon emptyNestImg1, emptyNestImg2
				- images of an empty nest, 2 different colors (top/bottom)
				- drawn after background, before Part
			- static ImageIcon partXXNestImg
				- image of part in 1 unit of nest
				- need an image for every possible Part
			- LaneManager laneManager
				- the LaneManager (client) which talks to the Server
			- int nestID
				- the ID of this nest
			- ArrayList<Boolean> nestSpots
				- true if spot is filled, false if not

###Camera - Harry
	cameraGraphicsLogic:
		Methods:
			- boolean takeNestPhoto(Nest, Nest)
				- this function "takes a photo" of two nests simultaneously and returns true if they pass inspection
				// TODO both nests simultaneously or return quality of each?
				- first check to see that nest is full before taking photo
			- boolean takeKitPhoto(Kit, KitConfig)
				- this function "takes a photo" of a completed kit and compares it to the KitConfig, returning true if it matches and false if it does not
				- KitConfig is the benchmark kit configuration (the way the kit should be)

		Variables:
			- Map<Part, boolean> qualityOfParts
				- this map stores whether a nest part is good or damaged
				- values will all be true for v.0
			- Map<Part, xCoordinate>
			- Map<Part, yCoordinate>
			// boolean photo taken?

	cameraDisplay:
		Methods:
			// retrieve center position of nest or kit to take photo of
		Variables:
			Ellipse2D.Double cameraFlash
				- this circle simulates a camera flash/photo being taken


###Parts Robot - James
	robotLogic
	Variables:
		-int robotInitialX, robotInitialY
			-initial location of robot
		-int robotCurrentX, robotCurrentY
			-current location of robot
		-boolean arm1, arm2, arm3, arm4
			-whether the arm is full, initialized empty
		-int ArrayList<Part> partArray
			-an array of parts that allocates memory for 4 parts
	Methods:
		-pickUpPart(Part)
			-pickup from nests
			-goes to a location to pick up a part
			-be able to hold 4 parts at a time
		-givePartToKit(Kit, int)
			-gives the part to the kit
			-goes to a location to give a part
			-puts part in a specific location inside the kit
		-rotateArm()
			-rotates the arm
		-isFullArm1(arm1)
			-returns true if arm1 is full
		-isFullArm2(arm2)
			-returns true if arm2 is full
		-isFullArm3(arm3)
			-returns true if arm3 is full
		-isFullArm4(arm4)
			-returns true if arm4 is full
		-goHome()
			-depends on specific graphics implementation
			-sends the robot back to the initial location
			-makes sure that the robot doesn't collide
			-then send message that the action has been performed(either part is picked up or it's given to a kit)
	
	robotDisplay	
	Variables:
		-int robotInitialX, robotInitialY
			-initial location of robot
		-int robotCurrentX, robotCurrentY
			-current location of robot
		-int armInitialX, armInitialY
			-initial location of the arm
		-int armCurrentX, armCurrentY
			-current location of arm
	Methods:
		-drawRobot(robotImage, armImage)
			-draws the robot
			-pass by reference robotImage to drawperformed
		-rotateRobot(armLocation)
			-rotates the robot so the arm is in a different position

###Kits Robot --Adrian
	KitsRobotGraphicsLogic
	Methods
		-void receiveData(request)
			-basically change jobisdone to true

		-void moveEmptyKitToLocation1(KitGraphicsLogic kgl)
			-move an empty kit to location1;
			-change job is not done;
					
		-void moveEmptyKitToLocation2(KitGraphicsLogic kgl)
			-move an empty kit to location2;

		-void moveKitToInspectionStand(KitGraphicsLogic kgl)
			-move a completed kit to inspection stand
		
		-void moveKitToConveyor(KitGraphicsLogic kgl);
			-move the kit from the inspection stand and move it to the conveyor.  
		
		-void dropKit(Location)
			-put Kit at one of the tables
			-2 spots on the stand for parts robot, and 1 for camera
		
		-void goHome()
			-depends on specific graphics implementation				

		-setLocation(location);
			-changes the arm destination location
			
			
	Variables
	
		-boolean jobIsDone; 
			-if job is done, you can do another agent action
		-Location location;
		-int    currentLocationX and currentLocationY;
		-int    finalLocationX and finalLocationY;	
		-static	int conveyorX and conveyorY;
		-static int standLocation2X and standLocation2Y;
		-static int standLocation1X and standLocation1Y;
		-static int standInspectionX and standInspectionY;
		-Server server;	
	
	KitsRobotDisplay
		
	Variables
		-int robotLocationX, robotLocationY
			-location of Kit Robot(doesn't change)
		
		-int initArmLocationX,initArmLocationY
			-initial location of the arm
		
		-int currentArmLocationX, currentArmLocationY
			-location of the arm
		
		-int finalArmLocationX, finalArmLocationY
		
		-Server server;
		
		-ImageIcon robotImage, armImage;
		
		-boolean moveToInitialLocation;
		-boolean moveToFinalLocation;
		-boolean jobIsDone;
		
		-KitGraphicsLogic kitGraphicsLogic;
		
	
	Methods
		-receiveData(request)
			-depends on the request, rotates arm to location
			-changes moveToInitialLocation to true;
			-setsinitiallocations
			-setsfinallocations
		-void moveToInitialPickupLocation();
			-if moveToInitialLocation then rotate there	
			-change moveToFinalLocation to true
		
		-void moveToFinalLocation();			
			-if moveToFinalLocation then rotate there
			-then change jobIsDone to true
		
		-void rotateArm()
			-rotates arm to a specific location(4 locations: empty kit location, 2 kit locations, camera location)
			-will send message if job is done			
		
		-void rotateArmWithKit();
			-update robot arm and kit location
		
			
		-paintComponent(Graphics2D g2)
			-paints the robotImage and armImage
		
		-sendDoneMessage()
			-if jobIsDoneIsTrue;
			-sends the server that that the kitrobot is done;
	
###Conveyor - Vansh and Neetu
    The conveyor is going to used to bring empty kits into the factory and move completed ones out. After bringing empty kits into the factory, the kits will be moved by other robots. The conveyor will need to know how to move and stop based on its sensors and instructions from the factory agent.
    Methods:
        - constructor() : creates a companion display object
        - draw() : paints the conveyer belt with the kits at the right position
    Variables:
        - arrayList<ImageIcon> conveyorLines: 
                This will be a part of the graphical representation of the conveyor. 
                These lines will gradually move across the conveyor belt at a desired velocity.
        - ImageIcon conveyorBelt : should be a long rectangle meant to simulate the conveyor belt

###ConveyorLogic - Vansh and Neetu
    Contains all non-graphic related functions still needed for the companion display class to display properly.
    This class will contain a companion display object so said object can access any information when the graphic output changes
    Methods:
        - constructor() : creates a ConveyorLogic object
        - bringEmptyKit(Kit) : Brings in an empty Kit from offscreen. Here we would be creating a new kit variable. Moves the conveyor belt and the kit together.
        - giveKitToKitRobot(Kit) : gives kit to the kit robot. Deletes the kit from the kitsOnConveyor. 
        - receiveKit(Kit) : receive completed Kit from Kit Robot then move the Kit offscreen
    Variables:
        - Conveyor : reference to companion display object
        - arrayList<Kits> kitsOnConveyor : this will keep track of all the kits on the conveyor. 

###Part - Vansh and Neetu
    Parts are going to used to assemble the kits. The parts will have a respective image and sound associated to them.
    Methods:
        - constructor() : creates a companion display object
        - getLocationX() : returns the x coordinate of the part
        - getLocationY() : returns the y coordinate of the part
        - draw(int,int) : draws the part at the correct location
    Variables:
        - locationX and locationY : location of the part
        - ImageIcon image : image of the part
        
###PartLogic - Vansh and Neetu
    Methods:
        - constructor(PartType): Based on the PartType, image and sound will be set to their correct values
        - getName() : returns the name
        - playSound() : plays the sound
    Variables:
        - Part : reference to companion display object
        - PartType type :  determines what kind of part it is
        - sound (V2) : sound the part makes

###Kit - Vansh and Neetu
    Methods:
        - constructor() : creates default empty companion display object
        - draw(int, int) : draws the kit at the location
        - getLocationX() : returns the x coordinate of the part
        - getLocationY() : returns the y coordinate of the part
    Variables:
        - locationX and locationY : location of the kit
        - ImageIcon kitImage : image of the kit

###KitLogic - Vansh and Neetu
     Methods:
        - constructor() : creates KitLogic to accompany companion display object
        - setPartTypes(ArrayList<PartType>) : sets partTypes
        - addPart(Part) : adds the part to part ArrayList
     Variables:
	- Kit : reference to companion display object
        - ArrayList<Part> parts : keeps track of all the parts in the kit
        - ArrayList<PartType> partTypes : list of all the parts required in the kit
        
###Bin - Vansh and Neetu
    Methods:
        - draw(int, int) : draws the bin at the location
    Variables:
        - locationX and locationY : location of the kit
        - ArrayList<Part> parts : ArrayList of all the parts that are currently in the bin
        - Public Boolean isEmpty : determines if the bin is empty so the respective ImageIcon can be drawn.
        - ImageIcon full : image of a full bin
        - ImageIcon empty : image of an empty bin

###BinLogic - Vansh and Neetu
    Methods:
        - Constructor(Parts, int) : creates a bin containing numberous specified parts
        - receiveParts(ArrayList<Part> parts): both from constructor, and from Feedersâ€™ purge
        - getPartType() : returns the part type
        - getQuantity() : returns quantity of parts in the bin
        - setEmpty() : empties the bin during a purge
    Variables: 
        - Bin : reference to companion display object
         - int partQuantity : quantity of parts in the bin

##Global Functions / Data
None

##High Level Architecture

A general flow for the simulation:

* Agent generates actions
* Server receives these actions (e.g. pick up kit from conveyor)
* Server processes the action, does logic (e.g. remove kit from the conveyor list)
* Server sends messages to clients about animation needed to be drawn. 
* Clients receive messages, animate as told
* Clients send back to Server notifying animation done
* Server responds to Agent

To accomodate the networking requirements, all objects that we draw will have two sub parts: Logic and Display. When the server receives a message from the agent, Logic will first process the necessary changes to the data, then pass the appropriate draw commands to the Display class. 

##User Interface

##Test Cases
- Writing a main method full of instructions, see everything works without server instructions
- Some might not require testing, because the server agents will guarantee valid outputs.
